@using FlowManager.Domain.Entities

@if (IsOpen)
{
    <div class="popup-backdrop">
        <div class="popup-container">
            <h3>Create a new user</h3>
            
            <label>Name: </label>
            <input @bind="_name" type="text" class="popup-input" name="username" />

            <label>Email: </label>
            <input @bind="_email" type="text" class="popup-input" name="email" />

            <label>Password: </label>
            <input @bind="_password" type="password" class="popup-input" name="password" />
            
            <label>Select rank:</label>
            <select @bind="_rank" class="popup-input">
                <option value="" disabled selected>Select your option</option>
                <option value="basic">Basic user</option>
                <option value="moderator">Moderator</option>
                <option value="admin">Admin</option>
            </select>
            
            

            <div class="popup-actions">
                <button @onclick="Submit" class="popup-send">Send</button>
                <button @onclick="Close" class="popup-cancel">Cancel</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }
    
    private string _name = string.Empty;
    private string _email = string.Empty;
    private string _password = string.Empty;
    private string _rank = string.Empty;
    
    [Inject] private HttpClient Http { get; set; } = default!;
    
    private async Task Submit()
    {
        var payload = new
        {
            name = _name,
            email = _email,
            password = _password,
            role = _rank
        };

        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/register", payload);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("User registered successfully.");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Failed to register user: {response.StatusCode} - {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception while sending request: {ex.Message}");
        }

        await IsOpenChanged.InvokeAsync(false);
    }

    private Task Close() => IsOpenChanged.InvokeAsync(false);
}


