@using System.Net.Http.Json
@using FlowManager.Application.DTOs;
@using FlowManager.Application.DTOs.Responses.User
@inject HttpClient Http

@if (IsOpen)
{
    <div class="popup-backdrop">
        <div class="popup-container">

            @if (showAddForm)
            {
                <h3>Create a new user</h3>

                <label>Name: </label>
                <input @bind="_name" type="text" class="popup-input" name="username" />

                <label>Email: </label>
                <input @bind="_email" type="text" class="popup-input" name="email" />

                <label>Password: </label>
                <input @bind="_password" type="password" class="popup-input" name="password" />

                <label>Select rank:</label>
                <select @bind="_rank" class="popup-input">
                    <option value="" disabled selected>Select your option</option>
                    <option value="basic">Basic user</option>
                    <option value="moderator">Moderator</option>
                    <option value="admin">Admin</option>
                </select>

                <div class="modal-actions">
                    <button @onclick="RegisterUser">Send</button>
                    <button @onclick="() => showAddForm = false">Cancel</button>
                </div>
            }

            else
            {
                <h3>Manage Users</h3>

                @if (users.Any())
                {
                    <ul>
                        @foreach (var user in users)
                        {
                            <li>
                                <span><strong>@user.Name</strong> (@user.Email)</span>
                                @if (!string.Equals(user.Email, CurrentUserEmail, StringComparison.OrdinalIgnoreCase))
                                {
                                    <button @onclick="() => ConfirmDelete(user.Id, user.Name)">Delete</button>
                                    <button @onclick="() => OpenEditUser(user)">Update</button>


                                }
                            </li>
                        }

                    </ul>
                }
                else
                {
                    <p>No users found.</p>
                }

                <div class="modal-actions">
                    <button @onclick="() => showAddForm = true">+ Add User</button>
                    <button @onclick="Close">Close</button>
                </div>
            }
        </div>
    </div>
}

@if (showConfirm)
{
    <div class="popup-backdrop">
        <div class="popup-container">
            <h3>Confirm Delete</h3>
            <p>Are you sure you want to delete <strong>@userNameToDelete</strong>?</p>
            <div class="modal-actions">
                <button @onclick="DeleteUser">Yes, Delete</button>
                <button @onclick="CancelDelete">Cancel</button>
            </div>
        </div>
    </div>
}


@if (showEditForm)
{
    <div class="popup-backdrop">
        <div class="popup-container">
            <h3>Edit User</h3>

            <label>Name:</label>
            <input class="popup-input" @bind="selectedUser.Name" />

           
            <label>Email:</label>
            <input class="popup-input" @bind="selectedUser.Email" />

            <label>Add Role:</label>
            <select class="popup-input" @bind="selectedRole">
                <option value="">-- Select role --</option>
                @foreach (var role in availableRoles)
                {
                    <option value="@role">@role</option>
                }
            </select>

            <div class="modal-actions">
                <button @onclick="AddRoleToUser">Add Role</button>
                <button @onclick="SaveUserChanges">Save</button>
                <button @onclick="() => showEditForm = false">Cancel</button>
            </div>

            @if (selectedUser.UserRoles.Any())
            {
                <ul>
                    @foreach (var role in selectedUser.UserRoles)
                    {
                        <li>
                            @role.Role.Name
                            <button @onclick="() => RemoveRole(role.Role.Name)">❌</button>
                        </li>
                    }
                </ul>
            }
        </div>
    </div>
}


@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }
    [Parameter] public string CurrentUserEmail { get; set; } = "";
    private bool showAddForm = false;


    private List<UserResponseDto> users = new();
    private UserResponseDto newUser = new();
    private Guid userIdToDelete;
    private string userNameToDelete = "";
    private bool showConfirm = false;
    private string _name = "";
    private string _email = "";
    private string _password = "";
    private string _rank = "";
    private bool showEditForm = false;
    private UserResponseDto selectedUser = new();
    private string selectedRole = "";
    private List<string> availableRoles = new() { "basic", "moderator", "admin" };


    private async Task RegisterUser()
    {
        var payload = new
        {
            name = _name,
            email = _email,
            password = _password,
            role = _rank
        };

        Console.WriteLine($"[DEBUG] Starting user registration...");
        Console.WriteLine($"[DEBUG] Payload: Name='{_name}', Email='{_email}', Role='{_rank}', PasswordLength={_password?.Length ?? 0}");
        Console.WriteLine($"[DEBUG] HttpClient BaseAddress: {Http.BaseAddress}");
        Console.WriteLine($"[DEBUG] Full URL will be: {Http.BaseAddress}api/auth/register");

        try
        {
            Console.WriteLine($"[DEBUG] Sending POST request to api/auth/register...");
            var response = await Http.PostAsJsonAsync("api/auth/register", payload);

            Console.WriteLine($"[DEBUG] Response received - Status Code: {response.StatusCode}");
            Console.WriteLine($"[DEBUG] Response Headers: {string.Join(", ", response.Headers.Select(h => $"{h.Key}: {string.Join(", ", h.Value)}"))}");

            var responseBody = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"[DEBUG] Response Body: {responseBody}");

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("[SUCCESS] User registered successfully.");
                showAddForm = false;
                await LoadUsers();
            }
            else
            {
                Console.WriteLine($"[ERROR] Failed to register user: {response.StatusCode}");
                Console.WriteLine($"[ERROR] Response body: {responseBody}");
            }
        }
        catch (HttpRequestException httpEx)
        {
            Console.WriteLine($"[ERROR] HTTP Request Exception: {httpEx.Message}");
            Console.WriteLine($"[ERROR] HTTP Exception Details: {httpEx}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[ERROR] General Exception: {ex.Message}");
            Console.WriteLine($"[ERROR] Exception Details: {ex}");
            Console.WriteLine($"[ERROR] Stack Trace: {ex.StackTrace}");
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (IsOpen)
        {
            await LoadUsers();
            StateHasChanged();
        }
    }

    private async Task LoadUsers()
    {
        var allUsers = await Http.GetFromJsonAsync<List<UserResponseDto>>("api/users");
        users = allUsers
            .Where(u => !string.Equals(u.Email, CurrentUserEmail, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private async Task CreateUser()
    {
        var response = await Http.PostAsJsonAsync("api/users", newUser);
        if (response.IsSuccessStatusCode)
        {
            var created = await response.Content.ReadFromJsonAsync<UserResponseDto>();
            users.Add(created!);
            newUser = new();
            showAddForm = false;
        }
    }


    private void ConfirmDelete(Guid id, string name)
    {
        userIdToDelete = id;
        userNameToDelete = name;
        showConfirm = true;
    }

    private async Task DeleteUser()
    {
        await Http.DeleteAsync($"api/users/{userIdToDelete}");
        users = users.Where(u => u.Id != userIdToDelete).ToList();
        showConfirm = false;
    }

    private void CancelDelete()
    {
        showConfirm = false;
    }

    private async Task Close()
    {
        await IsOpenChanged.InvokeAsync(false);
    }
    private void OpenEditUser(UserResponseDto user)
    {
        selectedUser = new UserResponseDto
        {
            Id = user.Id,
            Name = user.Name,
            Email = user.Email,
            UserRoles = user.UserRoles?.ToList() ?? new()
        };
        showEditForm = true;
    }

    private void AddRoleToUser()
    {
        if (string.IsNullOrWhiteSpace(selectedRole))
            return;

        bool alreadyExists = selectedUser.UserRoles
            .Any(r => r.Role.Name.Equals(selectedRole, StringComparison.OrdinalIgnoreCase));

        if (!alreadyExists)
        {
            selectedUser.UserRoles.Add(new UserRoleDto { Role = new RoleDto { Name = selectedRole } });
            selectedRole = "";
        }
    }


    private async Task RemoveRole(string role)
    {
        var toRemove = selectedUser.UserRoles.FirstOrDefault(r => r.Role.Name == role);
        if (toRemove != null)
        {
            selectedUser.UserRoles.Remove(toRemove);
            await Http.DeleteAsync($"api/userroles/user/{selectedUser.Id}/role/{role}");
        }
    }


    private async Task SaveUserChanges()
    {
        var url = $"api/users/{selectedUser.Id}/name/{selectedUser.Name}/email/{selectedUser.Email}";
        var updateResponse = await Http.PutAsync(url, null);

        if (updateResponse.IsSuccessStatusCode)
        {
            foreach (var roleDto in selectedUser.UserRoles)
            {
                var role = roleDto.Role.Name;

                try
                {
                    var check = await Http.GetFromJsonAsync<RoleCheckResponse>(
                        $"api/userroles/user/{selectedUser.Id}/role/{role}/check");

                    if (check is not null && !check.IsInRole)
                    {
                        await Http.PostAsync($"api/userroles/user/{selectedUser.Id}/role/{role}", null);
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"[ERROR] Role check failed for '{role}': {ex.Message}");
                }
            }

            showEditForm = false;
            await LoadUsers();
        }
        else
        {
            Console.WriteLine($"[ERROR] Failed to update user: {updateResponse.StatusCode}");
        }
    }



}