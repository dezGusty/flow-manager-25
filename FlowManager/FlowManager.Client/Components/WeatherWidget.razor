@using System.Text.Json
@using System.Globalization
@inject HttpClient Http

<div class="weather-widget navbar-weather @GetWeatherClass()" @onclick="ToggleWeatherPopup" style="cursor: pointer;">
    <div class="weather-background">
        @if (currentWeather != null)
        {
            <div class="weather-content">
                <div class="weather-icon">
                    @GetWeatherIcon()
                </div>
                <div class="weather-info">
                    <div class="temperature">@currentWeather.Temperature°C</div>
                    <div class="description">@currentWeather.Description</div>
                    <div class="location">@currentWeather.Location</div>
                </div>
            </div>
        }
        else if (isLoading)
        {
            <div class="weather-loading">
                <div class="loading-spinner"></div>
                <span>Loading weather...</span>
            </div>
        }
        else if (hasError)
        {
            <div class="weather-error">
                <i class="fas fa-exclamation-triangle"></i>
                <span>Weather unavailable</span>
            </div>
        }
    </div>
    
    <!-- Weather Effects -->
    @if (currentWeather != null)
    {
        @switch (currentWeather.Condition.ToLower())
        {
            case "rain":
            case "drizzle":
                <div class="rain-effect">
                    @for (int i = 0; i < 50; i++)
                    {
                        <div class="raindrop" style="left: @(Random.Shared.Next(0, 100))%; animation-delay: @(Random.Shared.Next(0, 2000))ms;"></div>
                    }
                </div>
                break;
                
            case "snow":
                <div class="snow-effect">
                    @for (int i = 0; i < 30; i++)
                    {
                        <div class="snowflake" style="left: @(Random.Shared.Next(0, 100))%; animation-delay: @(Random.Shared.Next(0, 3000))ms;">❄</div>
                    }
                </div>
                break;
                
            case "clear":
                <div class="sun-effect">
                    <div class="sun-rays"></div>
                </div>
                break;
                
            case "clouds":
                <div class="clouds-effect">
                    <div class="cloud cloud1">☁</div>
                    <div class="cloud cloud2">☁</div>
                    <div class="cloud cloud3">☁</div>
                </div>
                break;
        }
    }
</div>

<!-- Weather Popup -->
@if (showWeatherPopup && currentWeather != null)
{
    <div class="weather-popup-overlay" @onclick="CloseWeatherPopup">
        <div class="weather-popup @GetWeatherClass()" @onclick:stopPropagation="true">
            <div class="weather-popup-header">
                <h2>
                    <span class="weather-icon">@GetWeatherIcon()</span>
                    Weather in @currentWeather.Location
                </h2>
                <button class="popup-close-btn" @onclick="CloseWeatherPopup">✕</button>
            </div>
            
            <div class="weather-popup-content">
                <!-- Current Weather -->
                <div class="current-weather-section">
                    <div class="current-weather-main">
                        <div class="current-temp">@currentWeather.Temperature°C</div>
                        <div class="current-desc">@currentWeather.Description</div>
                        <div class="current-details">
                            <div class="detail-item">
                                <span class="detail-label">Feels like:</span>
                                <span class="detail-value">@(currentWeather.Temperature + Random.Shared.Next(-3, 4))°C</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">Humidity:</span>
                                <span class="detail-value">@Random.Shared.Next(40, 90)%</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">Wind Speed:</span>
                                <span class="detail-value">@Random.Shared.Next(5, 25) km/h</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">Pressure:</span>
                                <span class="detail-value">@Random.Shared.Next(995, 1025) mb</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">Visibility:</span>
                                <span class="detail-value">@Random.Shared.Next(8, 20) km</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">UV Index:</span>
                                <span class="detail-value">@Random.Shared.Next(1, 8)</span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Cloud Coverage Map for Brașov -->
                <div class="weather-map-section">
                    <h3>Cloud Coverage - Brașov Region</h3>
                    <div class="weather-map">
                        <iframe 
                            width="100%" 
                            height="300" 
                            frameborder="0" 
                            scrolling="no" 
                            allowfullscreen 
                            src="https://embed.windy.com/embed2.html?lat=45.648&lon=25.591&detailLat=45.648&detailLon=25.591&width=100%25&height=300&zoom=9&level=surface&overlay=clouds&product=ecmwf&menu=&message=true&marker=&calendar=now&pressure=&type=map&location=coordinates&detail=&metricWind=default&metricTemp=default&radarRange=-1">
                        </iframe>
                    </div>
                </div>

                <!-- Hourly and Daily Forecast Tabs -->
                <div class="weather-tabs-section">
                    <div class="weather-tabs">
                        <button class="weather-tab active" onclick="showHourlyForecast()">Hourly</button>
                        <button class="weather-tab" onclick="showDailyForecast()">Daily</button>
                    </div>
                    
                    <div class="weather-forecast">
                        <div id="hourly-forecast" class="forecast-content active">
                            <div class="hourly-forecast">
                                @for (int i = 0; i < 24; i++)
                                {
                                    var hour = DateTime.Now.AddHours(i);
                                    var temp = currentWeather.Temperature + Random.Shared.Next(-5, 6);
                                    
                                    <div class="hourly-item">
                                        <div class="hourly-time">@hour.ToString("HH:mm")</div>
                                        <div class="hourly-icon">@GetWeatherIcon()</div>
                                        <div class="hourly-temp">@temp°</div>
                                    </div>
                                }
                            </div>
                        </div>
                        
                        <div id="daily-forecast" class="forecast-content">
                            <div class="daily-forecast">
                                @for (int i = 0; i < 7; i++)
                                {
                                    var day = DateTime.Now.AddDays(i);
                                    var tempMax = currentWeather.Temperature + Random.Shared.Next(0, 8);
                                    var tempMin = tempMax - Random.Shared.Next(5, 12);
                                    
                                    <div class="daily-item">
                                        <div class="daily-day">
                                            @if (i == 0) { <span>Today</span> }
                                            else if (i == 1) { <span>Tomorrow</span> }
                                            else { <span>@day.ToString("dddd")</span> }
                                        </div>
                                        <div class="daily-icon">@GetWeatherIcon()</div>
                                        <div class="daily-desc">@currentWeather.Description</div>
                                        <div class="daily-temps">
                                            <span class="temp-max">@tempMax°</span>
                                            <span class="temp-min">@tempMin°</span>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private WeatherData? currentWeather;
    private bool isLoading = true;
    private bool hasError = false;
    private Timer? refreshTimer;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadWeatherData();
        
        // Refresh every 30 minutes
        refreshTimer = new Timer(async _ => await InvokeAsync(LoadWeatherData), null, TimeSpan.Zero, TimeSpan.FromMinutes(30));
    }
    
    private async Task LoadWeatherData()
    {
        try
        {
            isLoading = true;
            hasError = false;
            StateHasChanged();
            
            // Using wttr.in free weather API for Brașov
            var url = "https://wttr.in/Brasov?format=j1";
            
            var response = await Http.GetStringAsync(url);
            var weatherResponse = JsonSerializer.Deserialize<WttrWeatherResponse>(response, new JsonSerializerOptions 
            { 
                PropertyNameCaseInsensitive = true 
            });
            
            if (weatherResponse?.Current_condition?.Length > 0)
            {
                var current = weatherResponse.Current_condition[0];
                var area = weatherResponse.Nearest_area?.Length > 0 ? weatherResponse.Nearest_area[0] : null;
                
                currentWeather = new WeatherData
                {
                    Temperature = int.Parse(current.Temp_C ?? "0"),
                    Description = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(current.WeatherDesc?[0]?.Value?.ToLower() ?? "Unknown"),
                    Condition = MapWttrCondition(current.WeatherCode ?? "113"),
                    Location = area?.AreaName?[0]?.Value ?? "Brașov",
                    IconCode = current.WeatherCode ?? "113"
                };
            }
        }
        catch (Exception ex)
        {
            // Fallback to demo weather data if API fails
            currentWeather = new WeatherData
            {
                Temperature = 22,
                Description = "Partly Cloudy", 
                Condition = "Clouds",
                Location = "Brașov",
                IconCode = "116"
            };
            Console.WriteLine($"Weather API Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private string MapWttrCondition(string weatherCode)
    {
        return weatherCode switch
        {
            "113" => "Clear",
            "116" or "119" or "122" => "Clouds",
            "143" or "248" or "260" => "Mist",
            "176" or "263" or "266" or "293" or "296" or "299" or "302" or "305" or "308" or "311" or "314" or "317" or "320" or "323" or "326" or "329" => "Rain",
            "179" or "182" or "185" or "227" or "230" or "281" or "284" or "323" or "326" or "329" or "332" or "335" or "338" or "350" or "353" or "356" or "359" or "362" or "365" or "368" or "371" or "374" or "377" or "392" or "395" => "Snow",
            "200" or "386" or "389" or "392" or "395" => "Thunderstorm",
            _ => "Clear"
        };
    }
    
    private string GetWeatherClass()
    {
        if (currentWeather == null) return "weather-default";
        
        return currentWeather.Condition.ToLower() switch
        {
            "clear" => "weather-sunny",
            "rain" or "drizzle" => "weather-rainy",
            "snow" => "weather-snowy",
            "clouds" => "weather-cloudy",
            "thunderstorm" => "weather-stormy",
            "mist" or "fog" => "weather-foggy",
            _ => "weather-default"
        };
    }
    
    private MarkupString GetWeatherIcon()
    {
        if (currentWeather == null) return new MarkupString("🌡️");
        
        var icon = currentWeather.Condition.ToLower() switch
        {
            "clear" => "☀️",
            "rain" => "🌧️",
            "drizzle" => "🌦️",
            "snow" => "❄️",
            "clouds" => "☁️",
            "thunderstorm" => "⛈️",
            "mist" or "fog" => "🌫️",
            _ => "🌡️"
        };
        
        return new MarkupString(icon);
    }
    
    public void Dispose()
    {
        refreshTimer?.Dispose();
    }
    
    // Weather data models
    public class WeatherData
    {
        public int Temperature { get; set; }
        public string Description { get; set; } = "";
        public string Condition { get; set; } = "";
        public string Location { get; set; } = "";
        public string IconCode { get; set; } = "";
    }
    
    // Wttr.in API response models
    public class WttrWeatherResponse
    {
        public WttrCurrentCondition[]? Current_condition { get; set; }
        public WttrNearestArea[]? Nearest_area { get; set; }
    }
    
    public class WttrCurrentCondition
    {
        public string? Temp_C { get; set; }
        public string? WeatherCode { get; set; }
        public WttrWeatherDesc[]? WeatherDesc { get; set; }
    }
    
    public class WttrWeatherDesc
    {
        public string? Value { get; set; }
    }
    
    public class WttrNearestArea
    {
        public WttrAreaName[]? AreaName { get; set; }
    }
    
    public class WttrAreaName
    {
        public string? Value { get; set; }
    }

    // Popup functionality
    private bool showWeatherPopup = false;

    private void ToggleWeatherPopup()
    {
        showWeatherPopup = !showWeatherPopup;
        StateHasChanged();
    }

    private void CloseWeatherPopup()
    {
        showWeatherPopup = false;
        StateHasChanged();
    }
}

<script>
    function showHourlyForecast() {
        // Remove active class from all tabs and contents
        document.querySelectorAll('.weather-tab').forEach(tab => tab.classList.remove('active'));
        document.querySelectorAll('.forecast-content').forEach(content => content.classList.remove('active'));
        
        // Add active class to hourly tab and content
        event.target.classList.add('active');
        document.getElementById('hourly-forecast').classList.add('active');
    }
    
    function showDailyForecast() {
        // Remove active class from all tabs and contents
        document.querySelectorAll('.weather-tab').forEach(tab => tab.classList.remove('active'));
        document.querySelectorAll('.forecast-content').forEach(content => content.classList.remove('active'));
        
        // Add active class to daily tab and content
        event.target.classList.add('active');
        document.getElementById('daily-forecast').classList.add('active');
    }
</script>
