
@using FlowManager.Client.Services
@using Microsoft.AspNetCore.Components.Authorization


@implements IDisposable
@namespace FlowManager.Client.Components.Admin.ImpersonationIndicator

@if (isImpersonating)
{
    <div class="impersonation-indicator">
        <div class="impersonation-content">
            <div class="impersonation-icon">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                    <path fill-rule="evenodd" d="M18.685 19.097A9.723 9.723 0 0021.75 12c0-5.385-4.365-9.75-9.75-9.75S2.25 6.615 2.25 12a9.723 9.723 0 003.065 7.097A9.716 9.716 0 0012 21.75a9.716 9.716 0 006.685-2.653zm-12.54-1.285A7.486 7.486 0 0112 15a7.486 7.486 0 015.855 2.812A8.224 8.224 0 0112 20.25a8.224 8.224 0 01-5.855-2.438zM15.75 9a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0z" clip-rule="evenodd" />
                </svg>
            </div>
            <div class="impersonation-info">
                <div class="impersonation-title">Impersonating</div>
                <div class="impersonation-user">@impersonatedUserName</div>
                <div class="impersonation-admin">as @originalAdminName</div>
            </div>
        </div>
        <button class="end-impersonation-btn" @onclick="EndImpersonation" disabled="@isEndingImpersonation" title="End impersonation and return to admin dashboard">
            @if (isEndingImpersonation)
            {
                <div class="spinner-tiny"></div>
            }
            else
            {
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                    <path fill-rule="evenodd" d="M5.47 5.47a.75.75 0 011.06 0L12 10.94l5.47-5.47a.75.75 0 111.06 1.06L13.06 12l5.47 5.47a.75.75 0 11-1.06 1.06L12 13.06l-5.47 5.47a.75.75 0 01-1.06-1.06L10.94 12 5.47 6.53a.75.75 0 010-1.06z" clip-rule="evenodd" />
                </svg>
                <span>End</span>
            }
        </button>
    </div>
}

@code {
    @inject AuthenticationStateProvider AuthProvider

    @inject IJSRuntime JSRuntime

    @inject NavigationManager Navigation
    @inject ImpersonationService ImpersonationService

    private bool isImpersonating = false;
    private bool isEndingImpersonation = false;
    private string? impersonatedUserName;
    private string? originalAdminName;
    private Timer? refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        await CheckImpersonationStatus();

        // Set up a timer to periodically check impersonation status
        refreshTimer = new Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                await CheckImpersonationStatus();
            });
        }, null, TimeSpan.FromSeconds(30), TimeSpan.FromSeconds(30)); // Check every 30 seconds
    }

    private async Task CheckImpersonationStatus()
    {
        try
        {
            var wasImpersonating = isImpersonating;

            isImpersonating = await ImpersonationService.IsImpersonating();
            impersonatedUserName = await ImpersonationService.GetImpersonatedUserName();
            originalAdminName = await ImpersonationService.GetOriginalAdminName();

            // Only update UI if status changed
            if (wasImpersonating != isImpersonating)
            {
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[ImpersonationIndicator] Error checking status: {ex.Message}");
        }
    }

    private async Task EndImpersonation()
    {
        if (isEndingImpersonation) return;

        isEndingImpersonation = true;
        StateHasChanged();

        try
        {
            var result = await ImpersonationService.EndImpersonationAsync();

            if (result.Success)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Impersonation ended successfully. Returning to admin dashboard.");
                Navigation.NavigateTo("/admin", forceLoad: true);
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Failed to end impersonation: {result.Message}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[ImpersonationIndicator] Error ending impersonation: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "An error occurred while ending impersonation. Please try again.");
        }
        finally
        {
            isEndingImpersonation = false;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }
}
