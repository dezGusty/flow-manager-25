@using FlowManager.Client.Components.Admin.Flows
@using FlowManager.Client.Components.Admin.FormTemplate
@using FlowManager.Client.Components.Admin.Flows.AddFlow
@using FlowManager.Client.Components.Admin.Flows.AddFlow.FlowAddModal;
@using FlowManager.Client
@using FlowManager.Shared.DTOs.Responses.Flow
@using FlowManager.Client.Services;

@namespace FlowManager.Client.Components.Admin.WorkflowCarousel

<div class="workflow-carousel-container">
    <!-- Carousel Header -->
    <div class="carousel-header">
        <h2>Workflow Builder</h2>
        <div class="page-indicators">
            <div class="indicator @(_currentPage == 0 ? "active" : "")" @onclick="() => GoToPage(0)">
                <span class="indicator-number">1</span>
                <span class="indicator-label">Form Templates</span>
            </div>
            <div class="indicator @(_currentPage == 1 ? "active" : "")" @onclick="() => GoToPage(1)">
                <span class="indicator-number">2</span>
                <span class="indicator-label">Add Flow</span>
            </div>
            <div class="indicator @(_currentPage == 2 ? "active" : "")" @onclick="() => GoToPage(2)">
                <span class="indicator-number">3</span>
                <span class="indicator-label">View Flows</span>
            </div>
        </div>
    </div>

    <!-- Carousel Content -->
    <div class="carousel-content">
        <div class="carousel-track" style="transform: translateX(-@(_currentPage * 100)%);">

            <!-- Page 1: Form Templates -->
            <div class="carousel-page">
                <div class="page-content">
                    <FormTemplate OnTemplateSaved="@OnFormTemplateSavedLocally"
                                  @ref="formTemplateRef"
                                  ShouldSaveToDatabase="false" />
                </div>
            </div>

            <!-- Page 2: Flows -->
            <div class="carousel-page">
                <div class="page-content">
                    <FlowsAddModal SavedFormTemplateName="@_savedFormTemplateName"
                                   OnSaveWorkflow="@OnSaveWorkflowRequested"
                                   OnFlowSavedWithoutTemplate="@OnFlowSavedWithoutTemplate"
                                   @ref="flowsAddModalRef" />
                </div>
            </div>

            <!-- Page 3: View Form tempaltes -->
            <div class="carousel-page">
                <div class="page-content">
                    <FlowsViewModal OnEditFlowRequested="@OnEditFlowRequested" @ref="flowsViewModalRef" />
                </div>
            </div>

        </div>
    </div>
</div>
@if (_showEditModal && _selectedFlow != null)
{
    <FlowManager.Client.Components.Admin.Flows.EditFlowModal.EditFlowModal Flow="_selectedFlow"
                                                                           OnClose="@CloseEditModal"
                                                                           OnFlowUpdated="@OnFlowUpdatedInCarousel" />
}
@code {
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;
    [Inject] private FlowService _flowService { get; set; } = default!;
    [Inject] private FormTemplateService _formTemplateService { get; set; } = default!;
    private int _currentPage = 0;
    private int _totalPages = 3;

    private Guid? _savedFormTemplateId = null;
    private string _savedFormTemplateName = "";

    private FormTemplate? formTemplateRef;
    private FlowsAddModal? flowsAddModalRef;
    private FlowsViewModal? flowsViewModalRef;

    private bool _showEditModal = false;
    private FlowResponseDto? _selectedFlow = null;

    private async Task OnFormTemplateSavedLocally((Guid Id, string Name) templateInfo)
    {
        _savedFormTemplateId = templateInfo.Id;
        _savedFormTemplateName = templateInfo.Name;

        _currentPage = 1;
        StateHasChanged();
    }

    private async Task OnSaveWorkflowRequested()
    {
        try
        {
            if (flowsAddModalRef != null)
            {
                bool isFlowValid = await _flowService.GetFlowNameUnicityAsync(flowsAddModalRef.GetFlowName());

                if (formTemplateRef == null)
                    return;

                bool isFormTemplateValid = await _formTemplateService.GetFormTemplateNameUnicityAsync(formTemplateRef.GetFormTemplateName());

                if (!isFlowValid && !isFormTemplateValid)
                {
                    await flowsAddModalRef.SetFlowSubmitMessageAsync("Flow and form template names already exist!", false);
                    return;
                }
                else if (!isFlowValid)
                {
                    await flowsAddModalRef.SetFlowSubmitMessageAsync("Flow name already exists!", false);
                    return;
                }
                else if (!isFormTemplateValid)
                {
                    await flowsAddModalRef.SetFlowSubmitMessageAsync("Form template name already exists!", false);
                    return;
                }

                var savedFlow = await flowsAddModalRef.SaveWorkflowFirst();

                if (savedFlow.HasValue)
                {
                    if (formTemplateRef != null)
                    {
                        var savedTemplate = await formTemplateRef.SaveTemplateFromLocalStorageToDatabase(savedFlow.Value.Id);
                        if (savedTemplate.HasValue)
                        {
                            _savedFormTemplateId = savedTemplate.Value.Id;
                            _savedFormTemplateName = savedTemplate.Value.Name;

                            await flowsAddModalRef.SetFlowSubmitMessageAsync("Form template and flow created successfully!", true);

                            // Clear the workflow configuration after successful save
                            flowsAddModalRef.ClearConfiguration();

                            if (flowsViewModalRef != null)
                            {
                                await flowsViewModalRef.RefreshFlows();
                            }

                            _savedFormTemplateId = null;
                            _savedFormTemplateName = "";

                            _currentPage = 2;
                            StateHasChanged();
                        }
                        else
                        {
                            // Clear the workflow configuration after successful save (flow only)
                            flowsAddModalRef.ClearConfiguration();

                            if (flowsViewModalRef != null)
                            {
                                await flowsViewModalRef.RefreshFlows();
                            }

                            _savedFormTemplateId = null;
                            _savedFormTemplateName = "";

                            _currentPage = 2;
                            StateHasChanged();
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            _savedFormTemplateId = null;
            _savedFormTemplateName = "";
            StateHasChanged();
        }
    }

    private async Task PreviousPage()
    {
        if (_currentPage > 0)
        {
            var previousPage = _currentPage - 1;

            if (_currentPage == 1 && previousPage == 0)
            {
                if (formTemplateRef != null)
                {
                    await formTemplateRef.LoadFromLocalStorage();
                }
            }

            _currentPage = previousPage;
            StateHasChanged();
        }
    }

    private async Task NextPage()
    {
        if (_currentPage < _totalPages - 1)
        {
            var nextPage = _currentPage + 1;

            if (_currentPage == 0 && nextPage == 1)
            {
                await LoadTemplateNameFromLocalStorage();
            }

            if (nextPage == 2)
            {
                if (flowsViewModalRef != null)
                {
                    await flowsViewModalRef.RefreshFlows();
                }
            }

            _currentPage = nextPage;
            StateHasChanged();
        }
    }

    private async Task GoToPage(int pageIndex)
    {
        if (pageIndex >= 0 && pageIndex < _totalPages)
        {
            if (pageIndex == 1 && _currentPage != 1)
            {
                await LoadTemplateNameFromLocalStorage();
            }

            if (pageIndex == 0 && _currentPage != 0)
            {
                if (formTemplateRef != null)
                {
                    await formTemplateRef.LoadFromLocalStorage();
                }
            }

            if (pageIndex == 2 && _currentPage != 2)
            {
                if (flowsViewModalRef != null)
                {
                    await flowsViewModalRef.RefreshFlows();
                }
            }

            _currentPage = pageIndex;
            StateHasChanged();
        }
    }

    private async Task LoadTemplateNameFromLocalStorage()
    {
        try
        {
            var jsonString = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "formTemplate");

            if (!string.IsNullOrEmpty(jsonString))
            {
                using var document = System.Text.Json.JsonDocument.Parse(jsonString);
                var root = document.RootElement;

                if (root.TryGetProperty("TemplateName", out var templateNameProperty))
                {
                    var storedTemplateName = templateNameProperty.GetString();
                    if (!string.IsNullOrEmpty(storedTemplateName))
                    {
                        _savedFormTemplateName = storedTemplateName;
                        StateHasChanged();
                    }
                    else
                    {
                        _savedFormTemplateName = "";
                        _savedFormTemplateId = null;
                    }
                }
                else
                {
                    _savedFormTemplateName = "";
                    _savedFormTemplateId = null;
                }
            }
            else
            {
                _savedFormTemplateName = "";
                _savedFormTemplateId = null;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            _savedFormTemplateName = "";
            _savedFormTemplateId = null;
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        _currentPage = 0;
    }

    private void OnEditFlowRequested(FlowResponseDto flow)
    {
        _selectedFlow = flow;
        _showEditModal = true;
        StateHasChanged();
    }

    private async Task CloseEditModal()
    {
        _showEditModal = false;
        _selectedFlow = null;
        StateHasChanged();
    }

    private async Task OnFlowSavedWithoutTemplate()
    {
        try
        {
            if (flowsViewModalRef != null)
            {
                await flowsViewModalRef.RefreshFlows();
            }

            _currentPage = 2;
            StateHasChanged();
        }
        catch (Exception ex)
        {
        }
    }

    private async Task OnFlowUpdatedInCarousel(FlowResponseDto updatedFlow)
    {
        if (flowsViewModalRef != null)
        {
            await flowsViewModalRef.RefreshFlows();
        }

        await CloseEditModal();
        StateHasChanged();
    }
}