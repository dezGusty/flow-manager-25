@using FlowManager.Client.Components.Admin.Flows
@using FlowManager.Client.Components.Admin.FormTemplate
@using FlowManager.Client.Components.Admin.Flows.AddFlow
@using FlowManager.Client.Components.Admin.Flows.AddFlow.FlowAddModal;
@using FlowManager.Client
@using FlowManager.Shared.DTOs.Responses.Flow

@namespace FlowManager.Client.Components.Admin.WorkflowCarousel

<div class="workflow-carousel-container">
    <!-- Carousel Header -->
    <div class="carousel-header">
        <h2>Workflow Builder</h2>
        <div class="page-indicators">
            <div class="indicator @(_currentPage == 0 ? "active" : "")" @onclick="() => GoToPage(0)">
                <span class="indicator-number">1</span>
                <span class="indicator-label">Form Templates</span>
            </div>
            <div class="indicator @(_currentPage == 1 ? "active" : "")" @onclick="() => GoToPage(1)">
                <span class="indicator-number">2</span>
                <span class="indicator-label">Add Flow</span>
            </div>
            <div class="indicator @(_currentPage == 2 ? "active" : "")" @onclick="() => GoToPage(2)">
                <span class="indicator-number">3</span>
                <span class="indicator-label">View Flows</span>
            </div>
        </div>
    </div>

    <!-- Carousel Content -->
    <div class="carousel-content">
        <div class="carousel-track" style="transform: translateX(-@(_currentPage * 100)%);">

            <!-- Page 1: Form Templates -->
            <div class="carousel-page">
                <div class="page-content">
                    <FormTemplate OnTemplateSaved="@OnFormTemplateSavedLocally"
                                  @ref="formTemplateRef"
                                  ShouldSaveToDatabase="false" />
                </div>
            </div>

            <!-- Page 2: Flows -->
            <div class="carousel-page">
                <div class="page-content">
                    <FlowsAddModal SavedFormTemplateName="@_savedFormTemplateName"
                                   OnSaveWorkflow="@OnSaveWorkflowRequested"
                                   @ref="flowsAddModalRef" />
                </div>
            </div>

            <div class="carousel-page">
                <div class="page-content">
                    <FlowsViewModal OnEditFlowRequested="@OnEditFlowRequested" @ref="flowsViewModalRef" />
                </div>
            </div>

        </div>
    </div>

    <!-- Navigation Controls -->
    <div class="carousel-navigation">
        <button class="nav-button prev @(_currentPage == 0 ? "disabled" : "")"
                @onclick="PreviousPage"
                disabled="@(_currentPage == 0)">
            <span class="nav-icon">‹</span>
            <span class="nav-text">Previous</span>
        </button>

        <div class="page-counter">
            <span class="current-page">@(_currentPage + 1)</span>
            <span class="page-separator">of</span>
            <span class="total-pages">@_totalPages</span>
        </div>

        <button class="nav-button next @(_currentPage == _totalPages - 1 ? "disabled" : "")"
                @onclick="NextPage"
                disabled="@(_currentPage == _totalPages - 1)">
            <span class="nav-text">Next</span>
            <span class="nav-icon">›</span>
        </button>
    </div>
</div>
@if (_showEditModal && _selectedFlow != null)
{
    <FlowManager.Client.Components.Admin.Flows.EditFlowModal.EditFlowModal Flow="_selectedFlow"
                                                                           OnClose="@CloseEditModal"
                                                                           OnFlowUpdated="@OnFlowUpdatedInCarousel" />
}
@code {
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;
    private int _currentPage = 0;
    private int _totalPages = 3;

    private Guid? _savedFormTemplateId = null;
    private string _savedFormTemplateName = "";

    // Component references
    private FormTemplate? formTemplateRef;
    private FlowsAddModal? flowsAddModalRef;
    private FlowsViewModal? flowsViewModalRef;

    private bool _showEditModal = false;
    private FlowResponseDto? _selectedFlow = null;

    // Called when form template is saved locally (triggers navigation to page 2)
    private async Task OnFormTemplateSavedLocally((Guid Id, string Name) templateInfo)
    {
        _savedFormTemplateId = templateInfo.Id;
        _savedFormTemplateName = templateInfo.Name;

        // Navigate to page 2 (FlowsAddModal)
        _currentPage = 1;
        StateHasChanged();
    }

    // Called when FlowsAddModal wants to save the workflow
    private async Task OnSaveWorkflowRequested()
    {
        try
        {
            Console.WriteLine("flows modal");
            // PASUL 1: Creează Flow-ul (FormTemplateId = null)
            if (flowsAddModalRef != null)
            {
                Console.WriteLine("calling save flow");
                var savedFlow = await flowsAddModalRef.SaveWorkflowFirst();
                Console.WriteLine("saved flow");
                if (savedFlow.HasValue)
                {
                    Console.WriteLine("saved flow has value");
                    // PASUL 2: Creează Template-ul cu FlowId (GATA!)
                    if (formTemplateRef != null)
                    {
                        Console.WriteLine("ft ref not null");
                        var savedTemplate = await formTemplateRef.SaveTemplateFromLocalStorageToDatabase(savedFlow.Value.Id);
                        Console.WriteLine("ft saved");
                        if (savedTemplate.HasValue)
                        {
                            _savedFormTemplateId = savedTemplate.Value.Id;
                            _savedFormTemplateName = savedTemplate.Value.Name;

                            await JSRuntime.InvokeVoidAsync("alert", "Workflow and template saved successfully!");

                            // Navighează la vizualizare
                            _currentPage = 2;
                            StateHasChanged();
                        }
                        else
                        {
                            // Flow creat, dar template a eșuat
                            await JSRuntime.InvokeVoidAsync("alert", "Workflow saved, but template creation failed.");
                            _currentPage = 2;
                            StateHasChanged();
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    private async Task PreviousPage()
    {
        if (_currentPage > 0)
        {
            var previousPage = _currentPage - 1;

            // Special handling when going back to FormTemplate from FlowsAddModal
            if (_currentPage == 1 && previousPage == 0)
            {
                // Load template from localStorage when returning to FormTemplate
                if (formTemplateRef != null)
                {
                    await formTemplateRef.LoadFromLocalStorage();
                }
            }

            _currentPage = previousPage;
            StateHasChanged();
        }
    }

    private async Task NextPage()
    {
        if (_currentPage < _totalPages - 1)
        {
            var nextPage = _currentPage + 1;

            // Special handling when going from FormTemplate to FlowsAddModal
            if (_currentPage == 0 && nextPage == 1)
            {
                await LoadTemplateNameFromLocalStorage();
            }

            _currentPage = nextPage;
            StateHasChanged();
        }
    }

    private async Task GoToPage(int pageIndex)
    {
        if (pageIndex >= 0 && pageIndex < _totalPages)
        {
            // Special handling when navigating to FlowsAddModal (page 1)
            if (pageIndex == 1 && _currentPage != 1)
            {
                await LoadTemplateNameFromLocalStorage();
            }

            // Special handling when going back to FormTemplate from another page
            if (pageIndex == 0 && _currentPage != 0)
            {
                if (formTemplateRef != null)
                {
                    await formTemplateRef.LoadFromLocalStorage();
                }
            }

            _currentPage = pageIndex;
            StateHasChanged();
        }
    }

    private async Task LoadTemplateNameFromLocalStorage()
    {
        try
        {
            var jsonString = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "formTemplate");

            if (!string.IsNullOrEmpty(jsonString))
            {
                using var document = System.Text.Json.JsonDocument.Parse(jsonString);
                var root = document.RootElement;

                if (root.TryGetProperty("TemplateName", out var templateNameProperty))
                {
                    var storedTemplateName = templateNameProperty.GetString();
                    if (!string.IsNullOrEmpty(storedTemplateName))
                    {
                        _savedFormTemplateName = storedTemplateName;
                        Console.WriteLine($"Loaded template name from localStorage: {_savedFormTemplateName}");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading template name from localStorage: {ex.Message}");
        }
    }

    protected override void OnInitialized()
    {
        // Start on first page (Form Templates)
        _currentPage = 0;
    }

    private void OnEditFlowRequested(FlowResponseDto flow)
    {
        _selectedFlow = flow;
        _showEditModal = true;
        StateHasChanged();
    }

    private async Task CloseEditModal()
    {
        _showEditModal = false;
        _selectedFlow = null;
        StateHasChanged();
    }

    private async Task OnFlowUpdatedInCarousel(FlowResponseDto updatedFlow)
    {
        if (flowsViewModalRef != null)
        {
            await flowsViewModalRef.RefreshFlows();
        }

        await CloseEditModal();
        StateHasChanged();
    }
}