@using FlowManager.Shared.DTOs.Responses.Flow
@using FlowManager.Shared.DTOs.Responses.FormTemplate
@using FlowManager.Client.Components.Admin.FormTemplate
@using FlowManager.Client.Components.Admin.EditFormTemplate
@using FlowManager.Client.Components.Admin.EditFlow

<div class="flow-edit-modal-overlay" @onclick="@(() => OnClose.InvokeAsync())" @onclick:stopPropagation="false">
    <div class="flow-edit-modal-container" @onclick:stopPropagation="true">

        <!-- Modal Header -->
        <div class="modal-header">
            <h2>Edit Form Template: @Flow?.Name</h2>
            <button class="modal-close" @onclick="@(() => OnClose.InvokeAsync())" aria-label="Close modal">×</button>
        </div>

        <div class="tab-header">
            <button class="tab-button @(isEditFormTabActive ? "active" : "inactive")" @onclick="() => isEditFormTabActive = true">
                Edit Form
            </button>

            <button class="tab-button @(!isEditFormTabActive ? "active" : "inactive")" @onclick="() => isEditFormTabActive = false">
                Edit Flow
            </button>
        </div>

        <!-- Content -->
        @if (isEditFormTabActive)
        {
            <div class="modal-content">
                @* Încarcă întotdeauna EditFormTemplate, indiferent dacă există FormTemplateId sau nu *@
            <EditFormTemplate FlowId="@Flow!.Id"
                              FormTemplateId="@(Flow.FormTemplateId ?? Guid.Empty)"
                              OnTemplateSaved="@OnTemplateSaved"
                              @ref="editFormTemplateRef" />
            </div>

            <!-- Modal Footer -->
            <div class="modal-footer">
                <button class="btn-secondary" @onclick="@(() => OnClose.InvokeAsync())">
                    Cancel
                </button>
                <button class="btn-primary" @onclick="SaveTemplate" disabled="@(_isSaving)">
                    @if (_isSaving)
                    {
                        <span class="loading-spinner"></span>
                    }
                    @(Flow?.FormTemplateId != null ? "Save Changes" : "Create Template")
                </button>
            </div>
        }
        else
        {
            <div class="modal-content">
                <EditFlow FlowId="@Flow!.Id"
                          OnFlowSaved="@OnFlowSaved"
                          FormTemplateId="@(Flow.FormTemplateId ?? Guid.Empty)"
                          @ref="editFlowRef" />
            </div>
        }
    </div>
</div>

@code {
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;

    [Parameter] public FlowResponseDto? Flow { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<FlowResponseDto> OnFlowUpdated { get; set; }

    private bool _isSaving = false;

    // Component reference
    private EditFormTemplate? editFormTemplateRef;
    private EditFlow? editFlowRef;

    private bool isEditFormTabActive = true;

    private async Task OnTemplateSaved()
    {
        // Called when form template is saved
        await JSRuntime.InvokeVoidAsync("alert", "Form template updated successfully!");

        // Notify parent that flow was updated
        if (Flow != null && OnFlowUpdated.HasDelegate)
        {
            await OnFlowUpdated.InvokeAsync(Flow);
        }

        // Close the modal
        await OnClose.InvokeAsync();
    }

    private bool IsFormValid()
    {
        Console.WriteLine($"Checking form validity: {editFormTemplateRef?.IsFormValid()}");
        return editFormTemplateRef?.IsFormValid() ?? false;
    }

    private async Task OnFlowSaved()
    {
        await JSRuntime.InvokeVoidAsync("alert", "Flow updated successfully!");

        if (Flow != null && OnFlowUpdated.HasDelegate)
        {
            await OnFlowUpdated.InvokeAsync(Flow);
        }

        await OnClose.InvokeAsync();
    }

    private async Task SaveTemplate()
    {
        if (_isSaving || editFormTemplateRef == null) return;

        _isSaving = true;
        StateHasChanged();

        try
        {
            await editFormTemplateRef.SaveTemplate();
            await JSRuntime.InvokeVoidAsync("alert", "Template saved successfully!");

            // Notify parent that flow was updated
            if (Flow != null && OnFlowUpdated.HasDelegate)
            {
                await OnFlowUpdated.InvokeAsync(Flow);
            }

            // Close the modal
            await OnClose.InvokeAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving template: {ex.Message}");
        }
        finally
        {
            _isSaving = false;
            StateHasChanged();
        }
    }
}