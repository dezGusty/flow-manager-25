@using Microsoft.AspNetCore.Authorization
@using FlowManager.Client.ViewModels
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Departments</PageTitle>

<h2 class="page-title">Departments</h2>

<div class="actions-bar">
    <button class="action-btn create-btn" @onclick="OpenCreateModal">+ Create Department</button>
</div>

<div class="departments-grid">
    @if (departments == null || !departments.Any())
    {
        <p>No departments available.</p>
    }
    else
    {
        @foreach (var department in departments)
        {
            <div class="department-card" @onclick="() => OpenModal(department)">
                <span class="department-name">@department.Name</span>

            </div>
        }
    }
</div>

@if (isModalOpen && selectedDepartment != null)
{
    <div class="modal-backdrop" @onclick="CloseModal">
        <div class="modal-content" @onclick:stopPropagation="true">

            <div class="modal-header">
                <h3>@selectedDepartment.Name</h3>
                <button class="close-icon" @onclick="CloseModal">✕</button>
            </div>

            @if (selectedDepartment.Teams != null && selectedDepartment.Teams.Any())
            {
                <div class="modal-section">
                    <h4>Teams</h4>
                    <ul>
                        @foreach (var team in selectedDepartment.Teams)
                        {
                            <li>@team.Name</li>
                        }
                    </ul>
                </div>
            }

            @if (selectedDepartment.Users != null && selectedDepartment.Users.Any())
            {
                <div class="modal-section">
                    <h4>Users</h4>
                    <ul>
                        @foreach (var user in selectedDepartment.Users)
                        {
                            <li>@user.Name (@user.Email)</li>
                        }
                    </ul>
                </div>
            }

            <div class="modal-actions">
                <button class="action-btn edit-btn" >✎ Edit</button>
                <button class="action-btn delete-btn" @onclick="async () => await DeleteDepartment(selectedDepartment.Id)">🗑 Delete</button>
            </div>
        </div>
    </div>
}

@if (isCreateModalOpen)
{
    <div class="create-dep-modal-overlay" @onclick="CloseCreateModal">
        <div class="create-dep-modal" @onclick:stopPropagation="true">

            <h2>Create Department</h2>

            <input type="text" placeholder="Department name" @bind="newDepName" />

            @if (!string.IsNullOrEmpty(error))
            {
                <p class="error-text">@error</p>
            }

            <div class="users-list">
                <h3>Select Users</h3>
                @if (unsignedUsers?.Any() == true)
                {
                    @foreach (var user in unsignedUsers)
                    {
                        <label class="user-checkbox">
                            <input type="checkbox"
                                   value="@user.Id"
                                   @onchange="e => ToggleUserSelection(user, (bool)e.Value )" />
                            <span>@user.Name (@user.Email)</span>
                        </label>
                    }
                }
                else
                {
                    <p class="no-users">No available users</p>
                }
            </div>

            <div class="modal-actions">
                <button class="btn save-btn" @onclick="SaveDepartment">💾 Save</button>
                <button class="btn cancel-btn" @onclick="CloseCreateModal">✕ Cancel</button>
            </div>
        </div>
    </div>
}
