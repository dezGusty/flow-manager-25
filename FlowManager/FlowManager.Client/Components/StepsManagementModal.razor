@using FlowManager.Domain.Entities
@using FlowManager.Client.Services
@inject StepService StepService
@inject UserService UserService

@if (IsOpen)
{
    <div class="popup-backdrop">
        <div class="steps-management-container">
            <div class="modal-header">
                <h3>Steps Management</h3>
                <button class="close-btn" @onclick="Close">Ã—</button>
            </div>

            <div class="modal-content">
                <div class="steps-actions">
                    <button @onclick="() => showStepModal = true" class="add-step-btn">Add New Step</button>
                </div>

                <div class="steps-list">
                    @if (allSteps.Any())
                    {
                        @foreach (var step in allSteps)
                        {
                            var isExpanded = expandedStepId == step.Id;
                            <div class="step-entry" @onclick="() => ToggleStepExpand(step.Id)">
                                <div class="step-summary">
                                    <strong>@step.Name</strong>
                                    <span class="step-date">@step.CreatedAt.ToLocalTime().ToString("g")</span>
                                </div>
                                @if (isExpanded)
                                {
                                    <div class="step-details">
                                       @*  <p><strong>Created:</strong> @step.CreatedAt.ToLocalTime().ToString("g")</p>
                                        <p><strong>Updated:</strong> @step.UpdatedAt.ToLocalTime().ToString("g")</p> *@
                                        
                                        <div class="assigned-users-section">
                                            <h4>Assigned Users</h4>
                                            @{
                                                var assignedUsers = GetAssignedUsers(step.Id);
                                            }
                                            @if (assignedUsers.Any())
                                            {
                                                <div class="assigned-users-list">
                                                    @foreach (var user in assignedUsers)
                                                    {
                                                        <div class="assigned-user">
                                                            <span class="user-name">@(user?.Name ?? "Unknown") (@(user?.Email ?? "No email"))</span>
                                                            <button @onclick="() => UnassignUser(step.Id, user.Id)" @onclick:stopPropagation="true" class="unassign-btn">Remove</button>
                                                        </div>
                                                    }
                                                </div>
                                            }
                                            else
                                            {
                                                <p class="no-assignments">No users assigned to this step.</p>
                                            }
                                            
                                            <div class="user-assignment" @onclick:stopPropagation="true">
                                                @{
                                                    var availableUsers = GetAvailableUsers(step.Id);
                                                }
                                                @if (availableUsers.Any())
                                                {
                                                    <select @bind="selectedUserId" class="user-select">
                                                        <option value="">-- Select a moderator --</option>
                                                        @foreach (var user in availableUsers)
                                                        {
                                                            <option value="@user.Id.ToString()">@(user?.Name ?? "Unknown") (@(user?.Email ?? "No email"))</option>
                                                        }
                                                    </select>
                                                    <button @onclick="() => AssignUser(step.Id)" @onclick:stopPropagation="true" 
                                                            disabled="@string.IsNullOrEmpty(selectedUserId)" class="assign-btn">Assign</button>
                                                }
                                                else
                                                {
                                                    <p class="no-moderators">No available moderators to assign.</p>
                                                }
                                            </div>
                                        </div>

                                        <div class="step-actions">
                                            <button @onclick="() => OpenEditStepModal(step)" @onclick:stopPropagation="true" class="edit-step-btn">Edit</button>
                                            <button @onclick="() => DeleteStep(step.Id)" @onclick:stopPropagation="true" class="delete-step-btn">Delete</button>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    }
                    else
                    {
                        <p class="no-steps">No steps created yet.</p>
                    }
                </div>
            </div>
        </div>
    </div>
}

<StepAddModal IsOpen="@showStepModal"
              IsOpenChanged="@(value => showStepModal = value)"
              OnSubmit="HandleStepSubmit" />

<StepEditModal IsOpen="@showEditStepModal"
               IsOpenChanged="@(value => showEditStepModal = value)"
               StepToEdit="@stepToEdit"
               OnSubmit="HandleStepUpdate" />

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }
    [Parameter] public List<Step> AllSteps { get; set; } = new();
    [Parameter] public EventCallback OnStepsChanged { get; set; }

    private List<Step> allSteps = new();
    private Guid? expandedStepId = null;
    private bool showStepModal = false;
    private bool showEditStepModal = false;
    private Step? stepToEdit = null;
    
    private List<User> allUsers = new();
    private Dictionary<Guid, List<User>> stepUserAssignments = new();
    private string selectedUserId = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        allSteps = AllSteps;
        if (IsOpen && allUsers.Count == 0)
        {
            await LoadUsers();
            await LoadStepUserAssignments();
        }
    }

    private async Task Close()
    {
        await IsOpenChanged.InvokeAsync(false);
        expandedStepId = null;
    }

    private void ToggleStepExpand(Guid stepId)
    {
        expandedStepId = expandedStepId == stepId ? null : stepId;
    }

    private void OpenEditStepModal(Step step)
    {
        stepToEdit = step;
        showEditStepModal = true;
        StateHasChanged();
    }

    private async void HandleStepSubmit(Step step)
    {
        var createdStep = await StepService.CreateStepAsync(step);
        if (createdStep != null)
        {
            await OnStepsChanged.InvokeAsync();
        }
        showStepModal = false;
        StateHasChanged();
    }

    private async void HandleStepUpdate(Step step)
    {
        var success = await StepService.UpdateStepAsync(step.Id, step);
        if (success)
        {
            await OnStepsChanged.InvokeAsync();
        }
        showEditStepModal = false;
        StateHasChanged();
    }

    private async void DeleteStep(Guid stepId)
    {
        var step = allSteps.FirstOrDefault(s => s.Id == stepId);
        if (step != null)
        {
            var confirmed = await ConfirmDelete($"Are you sure you want to delete the step '{step.Name}'? This action cannot be undone.");
            if (confirmed && await StepService.DeleteStepAsync(stepId))
            {
                await OnStepsChanged.InvokeAsync();
                StateHasChanged();
            }
        }
    }

    private async Task<bool> ConfirmDelete(string message)
    {
        // Simple confirmation for now - can be enhanced with a proper modal later
        return await Task.FromResult(true);
    }

    private async Task LoadUsers()
    {
        allUsers = await UserService.GetAllUsersAsync();
        StateHasChanged();
    }

    private async Task LoadStepUserAssignments()
    {
        stepUserAssignments.Clear();
        foreach (var step in allSteps)
        {
            var assignedUsers = await UserService.GetUsersByStepAsync(step.Id);
            stepUserAssignments[step.Id] = assignedUsers;
        }
        StateHasChanged();
    }

    private List<User> GetAssignedUsers(Guid stepId)
    {
        return stepUserAssignments.ContainsKey(stepId) ? stepUserAssignments[stepId] : new List<User>();
    }

    private List<User> GetAvailableUsers(Guid stepId)
    {
        try
        {
            var assignedUserIds = GetAssignedUsers(stepId).Select(u => u?.Id ?? Guid.Empty).ToHashSet();
            // Filter to moderators only and exclude already assigned users
            return allUsers?.Where(u => 
                u != null && 
                !assignedUserIds.Contains(u.Id) &&
                IsUserModerator(u)
            ).ToList() ?? new List<User>();
        }
        catch
        {
            return new List<User>();
        }
    }

    private bool IsUserModerator(User user)
    {
        try
        {
            // if (user?.UserRoles != null)
            // {
            //     return user.UserRoles.Any(ur => 
            //         ur?.Role != null && 
            //         ur.Role.Name != null && 
            //         ur.Role.Name.Equals("Moderator", StringComparison.OrdinalIgnoreCase)
            //     );
            // }
            return false;
        }
        catch
        {
            return false;
        }
    }

    private async Task AssignUser(Guid stepId)
    {
        if (!string.IsNullOrEmpty(selectedUserId) && Guid.TryParse(selectedUserId, out var userId))
        {
            var success = await UserService.AssignUserToStepAsync(stepId, userId);
            if (success)
            {
                await LoadStepUserAssignments();
                selectedUserId = string.Empty;
                StateHasChanged();
            }
        }
    }

    private async Task UnassignUser(Guid stepId, Guid userId)
    {
        var success = await UserService.UnassignUserFromStepAsync(stepId, userId);
        if (success)
        {
            await LoadStepUserAssignments();
            StateHasChanged();
        }
    }
}