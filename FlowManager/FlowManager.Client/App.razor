@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation

<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        @{
            var currentUrl = Navigation.ToBaseRelativePath(Navigation.Uri);
            var isPublicRoute = currentUrl == "auth" ||
            currentUrl == "reset-password" ||
            currentUrl == "" ||
            routeData.PageType.Name == "Auth" ||
            routeData.PageType.Name == "ResetPassword";
        }

        @if (isPublicRoute)
        {
            <RouteView RouteData="routeData" DefaultLayout="typeof(Layout.MainLayout)" />
        }
        else
        {
            <AuthorizeRouteView RouteData="routeData" DefaultLayout="typeof(Layout.MainLayout)">
                <Authorizing>
                    <div class="spinner-overlay">
                        <div class="spinner"></div>
                    </div>
                </Authorizing>
                <NotAuthorized>
                    @RedirectToRootOnce()
                </NotAuthorized>
            </AuthorizeRouteView>
        }
        <FocusOnNavigate RouteData="routeData" Selector="h1" />
    </Found>
    <NotFound>
        @RedirectToRootOnce()
    </NotFound>
</Router>

@code {
    private bool _hasRedirected;

    private RenderFragment RedirectToRootOnce() => builder =>
    {
        if (!_hasRedirected)
        {
            _hasRedirected = true;
            _ = InvokeAsync(() => Navigation.NavigateTo("/auth", true));
        }
    };
}