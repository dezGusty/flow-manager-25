@page "/reset-password"
@using FlowManager.Client.Services
@using System.ComponentModel.DataAnnotations
@inject ClientAuthService AuthService
@inject NavigationManager Navigation

<style>
.form-input {
    width: 100% !important;
    padding: 14px;
    margin-bottom: 16px;
    border: 1px solid #ddd;
    border-radius: 12px;
    background-color: #f8f9fa;
    font-size: 15px;
    transition: all 0.2s ease-in-out;
    box-sizing: border-box;
}

.form-input:focus {
    outline: none;
    border-color: #2DE6DB;
    background-color: #ffffff;
    box-shadow: 0 0 6px rgba(45, 230, 219, 0.4);
}
</style>

<div class="reset-password-container">
    <div class="reset-card">
        <div class="siemens-section">
            <h1 class="siemens-logo">Siemens</h1>
            <h2 class="reset-motto">Secure Password Reset</h2>
            <p class="reset-desc">Reset your password securely and get back to managing your flows.</p>
        </div>

        <div class="form-section">
            <div class="form-container">
                @if (currentStep == ResetStep.RequestCode)
                {
                    <h2 class="form-title">Reset Password</h2>
                    <p class="form-subtitle">Enter your email address</p>

                    <EditForm Model="requestModel" OnValidSubmit="HandleRequestSubmit">
                        <DataAnnotationsValidator />

                        <div class="input-group">
                            <InputText @bind-Value="requestModel.Email" class="form-input" placeholder="Email address" />
                            <ValidationMessage For="() => requestModel.Email" class="validation-error" />
                        </div>

                        <button type="submit" class="submit-btn" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span>Sending...</span>
                            }
                            else
                            {
                                <span>Send Reset Code</span>
                            }
                        </button>
                    </EditForm>
                }
                else if (currentStep == ResetStep.VerifyAndReset)
                {
                    <h2 class="form-title">Enter Reset Code</h2>
                    <p class="form-subtitle">Check your email for the 6-digit code</p>

                    <EditForm Model="confirmModel" OnValidSubmit="HandleConfirmSubmit">
                        <DataAnnotationsValidator />

                        <div class="input-group">
                            <InputText @bind-Value="confirmModel.Code" class="form-input code-input"
                                placeholder="6-digit code" maxlength="6" />
                            <ValidationMessage For="() => confirmModel.Code" class="validation-error" />
                        </div>

                        <div class="input-group">
                            <InputText @bind-Value="confirmModel.NewPassword" type="password" class="form-input"
                                placeholder="New password" />
                            <ValidationMessage For="() => confirmModel.NewPassword" class="validation-error" />
                        </div>

                        <div class="input-group">
                            <InputText @bind-Value="confirmModel.ConfirmPassword" type="password" class="form-input"
                                placeholder="Confirm password" />
                            <ValidationMessage For="() => confirmModel.ConfirmPassword" class="validation-error" />
                        </div>

                        <button type="submit" class="submit-btn" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span>Resetting...</span>
                            }
                            else
                            {
                                <span>Reset Password</span>
                            }
                        </button>
                    </EditForm>
                }

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="error-message">@errorMessage</div>
                }

                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="success-message">@successMessage</div>
                }

                <div class="back-to-login">
                    <a href="/auth" class="back-link">Back to Login</a>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private ResetStep currentStep = ResetStep.RequestCode;
    private bool isLoading = false;
    private string? errorMessage;
    private string? successMessage;

    private RequestResetModel requestModel = new();
    private ConfirmResetModel confirmModel = new();

    private async Task HandleRequestSubmit()
    {
        isLoading = true;
        errorMessage = null;
        StateHasChanged();

        var success = await AuthService.RequestPasswordResetAsync(requestModel.Email);

        if (success)
        {
            confirmModel.Email = requestModel.Email;
            currentStep = ResetStep.VerifyAndReset;
            successMessage = "Reset code sent to your email!";
        }
        else
        {
            errorMessage = "Failed to send reset code. Please try again.";
        }

        isLoading = false;
        StateHasChanged();
    }

    private async Task HandleConfirmSubmit()
    {
        if (confirmModel.NewPassword != confirmModel.ConfirmPassword)
        {
            errorMessage = "Passwords do not match.";
            return;
        }

        isLoading = true;
        errorMessage = null;
        StateHasChanged();

        var success = await AuthService.ConfirmPasswordResetAsync(
        confirmModel.Email,
        confirmModel.Code,
        confirmModel.NewPassword);

        if (success)
        {
            successMessage = "Password reset successfully! Redirecting to login...";
            StateHasChanged();
            await Task.Delay(2000);
            Navigation.NavigateTo("/auth");
        }
        else
        {
            errorMessage = "Invalid code or reset failed. Please try again.";
        }

        isLoading = false;
        StateHasChanged();
    }

    private enum ResetStep
    {
        RequestCode,
        VerifyAndReset
    }

    public class RequestResetModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;
    }

    public class ConfirmResetModel
    {
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Code is required")]
        [StringLength(6, MinimumLength = 6, ErrorMessage = "Code must be 6 digits")]
        public string Code { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters")]
        public string NewPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password confirmation is required")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}