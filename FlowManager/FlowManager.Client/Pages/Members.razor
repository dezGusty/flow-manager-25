@page "/members"
@using System.Net.Http.Json
@using FlowManager.Shared.DTOs.Requests
@using FlowManager.Shared.DTOs.Responses
@using FlowManager.Shared.DTOs.Responses.User
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using FlowManager.Client.ViewModels
@using FlowManager.Client.Services
@using FlowManager.Client.DTOs

@attribute [Authorize(Roles = "Admin")]

<PageTitle>Members</PageTitle>

<div class="adminButtons">
    <button @onclick="() => _showAddForm = true" class="adminViewUsersButton">+ Add User</button>
</div>

@if (_users.Any())
{
    <ul>
        @foreach (var user in _users)
        {
            <li>
                <span><strong>@user.Name</strong> (@user.Email)</span>
                <div>
                    <button @onclick="() => OpenEditUser(user)">Edit</button>
                </div>
            </li>
        }
    </ul>
}
else
{
    <p class="text-white">No users found.</p>
}

<FlowManager.Client.Components.MembersModals.MembersAddUserModal
    ShowAddForm="@_showAddForm"
    />

<FlowManager.Client.Components.MembersModals.MembersEditUserModal
    ShowEditForm="@_showEditForm"
    UserToEdit="@_selectedUserToEdit"/>


@code {
    [Inject] private UserService UserService { get; set; } = default!;

    private bool _showAddForm = false;
    private bool _showEditForm = false;

    private List<UserVM> _users = new();

    private List<RoleVM> _availableRoles = new();

    private UserVM _selectedUserToEdit = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        ApiResponse<PagedResponseDto<UserResponseDto>> response = await UserService.GetAllUsersQueriedAsync();

        if (!response.Success)
        { 
            _users = new();
            return;
        }

        _users = response.Result.Data.Select(u => new UserVM
        {
            Id = u.Id,
            Name = u.Name!,
            Email = u.Email!,
            IsActive = u.DeletedAt == null,
            Roles = u.Roles!.Select(r => new RoleVM
            {
                Id = r.Id,
                RoleName = r.Name!
            }).ToList(),
        }).ToList();
    }

    private void OpenEditUser(UserVM user)
    {
        _selectedUserToEdit = user;

        _showEditForm = true;
    }
}
