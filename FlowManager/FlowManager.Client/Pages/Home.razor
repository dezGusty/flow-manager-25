@* @page "/"
@using FlowManager.Domain.Entities
@using FlowManager.Client.Components

<PageTitle>FlowManager</PageTitle>

<div class="text-center">
    <h2>Flow Manager</h2>
    <h4>Welcome back {user}</h4>
    <div class="topBar">
        <select id="rank" @bind="selectedRole">
            <option value="basic">Basic User</option>
            <option value="moderator">Moderator</option>
            <option value="admin">Admin</option>
        </select>

        @if (selectedRole == "admin")
        {
            <div class="adminButtons">
                <button @onclick="() => showFlowModal = true" class="adminNewFlowButton">New Flow</button>
                <button @onclick="() => showUserModal = true" class="adminNewUserButton">New User</button>
            </div>
        }
        
        @if (selectedRole == "basic")
        {
            <button @onclick="() => showFormModal = true" class="newRequestButton">New request</button>
        }
        
    </div>
    
    
</div>

<NewFormModal IsOpen="@showFormModal"
              IsOpenChanged="@(value => showFormModal = value)"
              AvailableFlows="flows"
              CurrentUserId="@currentUserId"
              OnSubmit="HandleFormSubmit" />

<NewUserModal IsOpen="@showUserModal"
              IsOpenChanged="@(value => showUserModal = value)" />


<NewFlowModal IsOpen="@showFlowModal"
              IsOpenChanged="@(value => showFlowModal = value)"
              OnSubmit="HandleFlowSubmit" />


@if (userForms.Any())
{
    <div class="form-list">
        @foreach (var form in userForms)
        {
            var isExpanded = expandedFormId == form.Id;
            <div class="form-entry" @onclick="() => ToggleExpand(form.Id)">
                <div class="form-summary">
                    <strong>@GetFlowName(form.FlowId)</strong>
                    <span class="status @form.Status">@form.Status</span>
                    <span>@form.CreatedAt.ToLocalTime().ToString("g")</span>
                </div>
                @if (isExpanded)
                {
                    <div class="form-details">
                        <p><strong>Comment:</strong> @form.Comment</p>
                        <p><strong>Last Step:</strong> @(form.LastStep?.Name ?? "Not started")</p>
                        <p><strong>Status:</strong> @form.Status</p>
                        <p><strong>Updated:</strong> @form.UpdatedAt.ToLocalTime().ToString("g")</p>
                    </div>
                    <FlowTracker Steps="@flow.Steps.OrderBy(s => s.CreatedAt).ToList()" CurrentStepIndex="2" />
                }
            </div>
        }
    </div>
}
else
{
    <p style="margin-top: 2rem; align-content: center; text-align: center;">No requests submitted yet.</p>
}



@code {
        // TEST FLOW AND DATA
    Flow flow = new()
    {
        Name = "Test Flow"
    };

    private string selectedRole = "basic";

    private string userName = "John Doe";
    private Guid currentUserId = Guid.Parse("11111111-1111-1111-1111-111111111111");
    private bool showFormModal = false;
    private bool showUserModal = false;
    private bool showFlowModal = false;

    private List<Flow> flows = new();
    private List<Form> userForms = new();
    private Guid? expandedFormId = null;

    // This will be handled in the main OnInitializedAsync below

    private void HandleFormSubmit(Form form)
    {
        userForms.Insert(0, form);
        StateHasChanged();
    }

    private void ToggleExpand(Guid formId)
    {
        expandedFormId = expandedFormId == formId ? null : formId;
    }

    private string GetFlowName(Guid flowId)
    {
        return flows.FirstOrDefault(f => f.Id == flowId)?.Name ?? "Unknown Flow";
    }
    


} *@


@page "/"
@using FlowManager.Domain.Entities
@using FlowManager.Client.Components
@using FlowManager.Client.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient HttpClient
@inject FlowService FlowService
@inject StepService StepService

@attribute [Authorize]
<PageTitle>FlowManager</PageTitle>
<AuthorizeView>

<div class="text-center">
    <h2>Flow Manager</h2>
    <h4>Welcome back @context.User.Identity.Name</h4>
    <div class="topBar">
        <select id="rank" @bind="selectedRole" disabled="@isLoadingRoles">
            @if (isLoadingRoles)
            {
                <option value="">Loading roles...</option>
            }
            else if (userRoles.Any())
            {
                @foreach (var roleName in userRoles)
                {
                    var lowerRoleName = roleName.ToLower();
                    <option value="@lowerRoleName">@roleName</option>
                }
            }
            else
            {
                <option value="basic">Basic User</option>
            }
        </select>

        @if (selectedRole == "admin")
        {
            <div class="adminButtons">
                <button @onclick="() => showFlowModal = true" class="adminNewFlowButton">New Flow</button>
                <button @onclick="() => showUserModal = true" class="adminNewUserButton">New User</button>
                <button @onclick="() => showStepModal = true" class="adminNewStepButton">Add Step</button>
            </div>
        }

        @if (selectedRole == "basic")
        {
            <button @onclick="() => showFormModal = true" class="newRequestButton">New request</button>
        }
    </div>
</div>

<NewFormModal IsOpen="@showFormModal"
              IsOpenChanged="@(value => showFormModal = value)"
              AvailableFlows="flows"
              CurrentUserId="@currentUserId"
              OnSubmit="HandleFormSubmit" />

<NewUserModal IsOpen="@showUserModal"
              IsOpenChanged="@(value => showUserModal = value)" />

<NewFlowModal IsOpen="@showFlowModal"
              IsOpenChanged="@(value => showFlowModal = value)"
              OnSubmit="HandleFlowSubmit"
              OnFlowCreated="LoadFlows"
              AvailableSteps="allSteps" />

<StepAddModal IsOpen="@showStepModal"
              IsOpenChanged="@(value => showStepModal = value)"
              OnSubmit="HandleStepSubmit" />

<EditFlowModal IsOpen="@showEditFlowModal"
               IsOpenChanged="@(value => showEditFlowModal = value)"
               FlowToEdit="@flowToEdit"
               OnSubmit="HandleFlowUpdate"
               OnFlowUpdated="LoadFlows"
               AvailableSteps="allSteps" />

@if (selectedRole == "basic")
{
    @if (userForms.Any())
    {
        <div class="form-list">
            @foreach (var form in userForms)
            {
                var isExpanded = expandedFormId == form.Id;
                <div class="form-entry" @onclick="() => ToggleExpand(form.Id)">
                    <div class="form-summary">
                        <strong>@GetFlowName(form.FlowId)</strong>
                        <span class="status @form.Status">@form.Status</span>
                        <span>@form.CreatedAt.ToLocalTime().ToString("g")</span>
                    </div>
                    @if (isExpanded)
                    {
                        <div class="form-details">
                            <p><strong>Comment:</strong> @form.Comment</p>
                            <p><strong>Last Step:</strong> @(form.LastStep?.Name ?? "Not started")</p>
                            <p><strong>Status:</strong> @form.Status</p>
                            <p><strong>Updated:</strong> @form.UpdatedAt.ToLocalTime().ToString("g")</p>
                        </div>
                        <FlowTracker Steps="@flow.Steps.OrderBy(s => s.CreatedAt).ToList()" CurrentStepIndex="@currentStep" />
                    }
                </div>
            }
        </div>
    }
    else
    {
        <p style="margin-top: 2rem; align-content: center; text-align: center;">No requests submitted yet.</p>
    }
}
else if (selectedRole == "admin")
{
    <div class="form-list">
        @foreach (var flow in flows)
        {
            var isExpanded = expandedFormId == flow.Id;
            <div class="form-entry" @onclick="() => ToggleExpand(flow.Id)">
                <div class="form-summary">
                    <strong>@flow.Name</strong>
                </div>
                @if (isExpanded)
                {
                    <div class="form-details">
                        <p><strong>Description:</strong> @flow.Description</p>
                        @foreach (var step in flow.Steps)
                        {
                            <p><strong>Step:</strong> @step.Name</p>
                        }
                        <div class="flow-actions">
                            <button @onclick="() => OpenEditFlowModal(flow)" class="editFlowButton">Edit Flow</button>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
}
else if (selectedRole == "moderator")
{
    @if (userForms.Any())
    {
        <div class="form-list">
            @foreach (var form in userForms)
            {
                var isExpanded = expandedFormId == form.Id;
                <div class="form-entry" @onclick="() => ToggleExpand(form.Id)">
                    <div class="form-summary">
                        <strong>@GetFlowName(form.FlowId)</strong>
                        <span class="status @form.Status">@form.Status</span>
                        <span>@form.CreatedAt.ToLocalTime().ToString("g")</span>
                    </div>
                    @if (isExpanded)
                    {
                        <div class="form-details">
                            <p><strong>Comment:</strong> @form.Comment</p>
                        </div>
                        <div class="moderatorButtons">
                            <button class="approveButton" @onclick="ApproveStep">Approve</button>
                            <button class="rejectButton" @onclick="RejectStep">Reject</button>
                        </div>
                        <FlowTracker Steps="@flow.Steps.OrderBy(s => s.CreatedAt).ToList()" CurrentStepIndex="@currentStep" />
                    }
                </div>
            }
        </div>
    }
    else
    {
        <p style="margin-top: 2rem; align-content: center; text-align: center;">No requests for you yet.</p>
    }
}

</AuthorizeView>
@code {
    private string selectedRole = "basic";
    private string userName = "";
    private Guid currentUserId = Guid.Parse("11111111-1111-1111-1111-111111111111");

    private bool showFormModal = false;
    private bool showUserModal = false;
    private bool showFlowModal = false;
    private bool showStepModal = false;
    private bool showEditFlowModal = false;

    private List<Flow> flows = new();
    private List<Form> userForms = new();
    private List<Step> allSteps = new();
    private List<string> userRoles = new();
    private Guid? expandedFormId = null;
    private bool isLoadingRoles = true;
    private Flow? flowToEdit = null;
    
    int currentStep = 0;

    Flow flow = new()
    {
        Name = "Test Flow"
    };

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is { IsAuthenticated: true })
        {
            userName = user.Identity.Name;
            
            var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (Guid.TryParse(userIdClaim, out var userId))
            {
                currentUserId = userId;
            }
            
            // Get roles from authentication claims instead of API call
            userRoles = user.FindAll(ClaimTypes.Role).Select(c => c.Value).ToList();
            Console.WriteLine($"[DEBUG] Loaded roles from claims: {string.Join(", ", userRoles)}");
            
            if (userRoles.Any())
            {
                selectedRole = userRoles.First().ToLower();
            }
            else
            {
                Console.WriteLine($"[INFO] User has no roles assigned. Defaulting to 'basic' role.");
                selectedRole = "basic";
            }
            
            isLoadingRoles = false;
        }
        
        // Load data from APIs
        await LoadSteps();
        await LoadFlows();
        
        userForms = new List<Form>();
    }


    private void HandleFormSubmit(Form form)
    {
        userForms.Insert(0, form);
        StateHasChanged();
    }

    private void HandleFlowSubmit(Flow flow)
    {
        flows.Add(flow);            
        showFlowModal = false;      
        StateHasChanged();          
    }

    private async void HandleStepSubmit(Step step)
    {
        var createdStep = await StepService.CreateStepAsync(step);
        if (createdStep != null)
        {
            allSteps.Add(createdStep);
        }
        showStepModal = false;
        StateHasChanged();
    }

    private async Task LoadSteps()
    {
        allSteps = await StepService.GetStepsAsync();
        StateHasChanged();
    }

    private async Task LoadFlows()
    {
        flows = await FlowService.GetFlowsAsync();
        StateHasChanged();
    }

    private void ToggleExpand(Guid formId)
    {
        expandedFormId = expandedFormId == formId ? null : formId;
    }

    private string GetFlowName(Guid flowId)
    {
        return flows.FirstOrDefault(f => f.Id == flowId)?.Name ?? "Unknown Flow";
    }
    public void ApproveStep()
    {
        currentStep++;
        Console.WriteLine("Step approved");
    }

    public void RejectStep()
    {
        // Logic to reject the step
        Console.WriteLine("Step rejected");
    }

    private void OpenEditFlowModal(Flow flow)
    {
        flowToEdit = flow;
        showEditFlowModal = true;
        StateHasChanged();
    }

    private void HandleFlowUpdate(Flow flow)
    {
        var existingFlow = flows.FirstOrDefault(f => f.Id == flow.Id);
        if (existingFlow != null)
        {
            var index = flows.IndexOf(existingFlow);
            flows[index] = flow;
        }
        showEditFlowModal = false;
        StateHasChanged();
    }

}
