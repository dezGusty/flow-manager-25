@page "/"
@using FlowManager.Domain.Entities
@using FlowManager.Client.Components

<PageTitle>FlowManager</PageTitle>

<div class="text-center">
    <h2>Flow Manager</h2>
    <h4>Welcome back {user}</h4>
    <div class="topBar">
        <select id="rank">
            <option value="basic">Basic User</option>
            <option value="moderator">Moderator</option>
            <option value="admin">Admin</option>
        </select>

        <button @onclick="() => showFormModal = true" class="newRequestButton">New request</button>
    </div>
    
    @* Here should be either the requests sent by the basic user or the request to moderate by the moderator *@
    
</div>

<NewFormModal IsOpen="@showFormModal"
              IsOpenChanged="@(value => showFormModal = value)"
              AvailableFlows="flows"
              CurrentUserId="@currentUserId"
              OnSubmit="HandleFormSubmit" />

@if (userForms.Any())
{
    <div class="form-list">
        @foreach (var form in userForms)
        {
            var isExpanded = expandedFormId == form.Id;
            <div class="form-entry" @onclick="() => ToggleExpand(form.Id)">
                <div class="form-summary">
                    <strong>@GetFlowName(form.FlowId)</strong>
                    <span class="status @form.Status">@form.Status</span>
                    <span>@form.CreatedAt.ToLocalTime().ToString("g")</span>
                </div>
                @if (isExpanded)
                {
                    <div class="form-details">
                        <p><strong>Comment:</strong> @form.Comment</p>
                        <p><strong>Last Step:</strong> @(form.LastStep?.Name ?? "Not started")</p>
                        <p><strong>Status:</strong> @form.Status</p>
                        <p><strong>Updated:</strong> @form.UpdatedAt.ToLocalTime().ToString("g")</p>
                    </div>
                    <FlowTracker Steps="@flow.Steps.OrderBy(s => s.CreatedAt).ToList()" CurrentStepIndex="2" />
                }
            </div>
        }
    </div>
}
else
{
    <p style="margin-top: 2rem;">No requests submitted yet.</p>
}



@code {
    Flow flow = new()
    {
        Name = "Test Flow",
        Steps = new List<Step>
        {
            new() { Name = "Created" },
            new() { Name = "Team Leader" },
            new() { Name = "HR" },
            new() { Name = "IT" },
            new() { Name = "Finance" }
        }
    };
    
    private string userName = "John Doe";
    private Guid currentUserId = Guid.Parse("11111111-1111-1111-1111-111111111111");
    private bool showFormModal = false;

    private List<Flow> flows = new();
    private List<Form> userForms = new();
    private Guid? expandedFormId = null;

    protected override async Task OnInitializedAsync()
    {
        // Se pot înlocui cu date reale din API
        flows = new List<Flow>
        {
            new() { Id = Guid.NewGuid(), Name = "Hiring Process" },
            new() { Id = Guid.NewGuid(), Name = "Equipment Request" }
        };

        userForms = new List<Form>(); // goale inițial
    }

    private void HandleFormSubmit(Form form)
    {
        userForms.Insert(0, form); // îl adaugă sus în listă
        StateHasChanged();
    }

    private void ToggleExpand(Guid formId)
    {
        expandedFormId = expandedFormId == formId ? null : formId;
    }

    private string GetFlowName(Guid flowId)
    {
        return flows.FirstOrDefault(f => f.Id == flowId)?.Name ?? "Unknown Flow";
    }
}